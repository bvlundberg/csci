Admission Percentage = 31.75

> accepted <- myData[myData$admit == 1,]
> nrow(accepted)
[1] 127
> summary(accepted)
     admit        gre       
 Min.   :1   Min.   :300.0  
 1st Qu.:1   1st Qu.:540.0  
 Median :1   Median :620.0  
 Mean   :1   Mean   :618.9  
 3rd Qu.:1   3rd Qu.:680.0  
 Max.   :1   Max.   :800.0  
      gpa             rank     
 Min.   :2.420   Min.   :1.00  
 1st Qu.:3.220   1st Qu.:1.00  
 Median :3.540   Median :2.00  
 Mean   :3.489   Mean   :2.15  
 3rd Qu.:3.755   3rd Qu.:3.00  
 Max.   :4.000   Max.   :4.00

> rejected <- myData[myData$admit == 0,]
> nrow(rejected)
[1] 273
> summary(rejected)
     admit        gre       
 Min.   :0   Min.   :220.0  
 1st Qu.:0   1st Qu.:500.0  
 Median :0   Median :580.0  
 Mean   :0   Mean   :573.2  
 3rd Qu.:0   3rd Qu.:660.0  
 Max.   :0   Max.   :800.0  
      gpa             rank      
 Min.   :2.260   Min.   :1.000  
 1st Qu.:3.080   1st Qu.:2.000  
 Median :3.340   Median :3.000  
 Mean   :3.344   Mean   :2.641  
 3rd Qu.:3.610   3rd Qu.:3.000  
 Max.   :4.000   Max.   :4.000


> filtered2 <- myData[myData$admit == 1 & myData$gre >= 618.9 & myData$gpa >= 3.489 & myData$rank <= 2.15,]
> filtered2
    admit gre  gpa rank
3       1 800 4.00    1
13      1 760 4.00    1
15      1 700 4.00    1
22      1 660 3.63    2
26      1 800 3.66    1
27      1 620 3.61    1
80      1 620 4.00    1
90      1 660 4.00    2
92      1 720 3.64    1
105     1 660 3.95    2
107     1 700 3.56    1
119     1 800 3.70    1
151     1 800 3.74    1
153     1 640 3.94    2
163     1 700 3.56    2
203     1 700 4.00    1
208     1 640 3.63    1
235     1 800 3.53    1
237     1 660 3.49    2
271     1 640 3.95    2
273     1 680 3.67    2
304     1 680 3.98    2
336     1 620 3.71    1
351     1 780 4.00    2
378     1 800 4.00    2
387     1 740 3.86    2
392     1 660 3.88    2
394     1 620 3.75    2

> nrow(filtered2)
[1] 28

> filtered3 <- myData[myData$admit == 0 & myData$gre >= 618.9 & myData$gpa >= 3.489 & myData$rank <= 2.15,]
> filtered3
    admit gre  gpa rank
10      0 700 3.92    2
19      0 800 3.75    2
70      0 800 3.73    1
91      0 700 3.83    2
93      0 800 3.90    2
118     0 700 3.72    2
141     0 640 3.93    2
159     0 660 3.49    2
162     0 640 3.50    2
166     0 700 4.00    1
183     0 700 4.00    2
186     0 800 3.60    2
207     0 740 3.54    1
227     0 620 3.58    2
260     0 640 3.81    2
281     0 660 3.94    2
293     0 680 3.70    2
294     0 800 3.97    1
312     0 660 3.67    2
326     0 680 3.90    1
354     0 700 3.52    2
370     0 800 3.89    2
377     0 620 3.63    2
381     0 700 3.65    2
384     0 660 4.00    1
390     0 640 3.51    2
396     0 620 4.00    2
399     0 700 3.65    2

> nrow(filtered3)
[1] 28

GRE Tests
> nrow(myData[myData$admit == 1 & myData$gre >= 618,])
[1] 69
> nrow(myData[myData$gre >= 618,])
[1] 174

> 69/174
[1] 0.3965517

GPA Tests
> nrow(myData[myData$admit == 1 & myData$gpa >= 3.489,])
[1] 71
> nrow(myData[myData$gpa >= 3.489,])
[1] 165

> 71/165
[1] 0.430303

Rank Tests
> nrow(myData[myData$admit == 1 & myData$rank <= 2.15,])
[1] 87
> nrow(myData[myData$rank <= 2.15,])
[1] 212

> 87/212
[1] 0.4103774

All 3
Admit = -3.4495 + .777014GPA + .002294GRE - .560031RANK
> admitvalue(3.21, 700, 3)
[1] -1.029578
> admitvalue(3.38, 680, 3)
[1] -0.9433657
> admitvalue(3.89, 500, 3)
[1] -0.9600085
> admitvalue(3, 710, 3)
[1] -1.169811
> admitvalue(4, 500, 3)
[1] -0.874537
> admitvalue(2.89, 400, 2)
[1] -1.406392

Ordinal variables are variables that have two or more categories just like nominal variables only the categories can also be ordered or ranked. So if you asked someone if they liked the policies of the Democratic Party and they could answer either "Not very much", "They are OK" or "Yes, a lot" then you have an ordinal variable. Why? Because you have 3 categories, namely "Not very much", "They are OK" and "Yes, a lot" and you can rank them from the most positive (Yes, a lot), to the middle response (They are OK), to the least positive (Not very much). However, whilst we can rank the levels, we cannot place a "value" to them; we cannot say that "They are OK" is twice as positive as "Not very much" for example.

-- GPA
> logit <- glm(admit ~ gpa, family = binomial)
> summary(logit)

Call:
glm(formula = admit ~ gpa, family = binomial)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.1131  -0.8874  -0.7566   1.3305   1.9824  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -4.3576     1.0353  -4.209 2.57e-05 ***
gpa           1.0511     0.2989   3.517 0.000437 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 499.98  on 399  degrees of freedom
Residual deviance: 486.97  on 398  degrees of freedom
AIC: 490.97

Number of Fisher Scoring iterations: 4

> plot(gpa, admit)
> curve(predict(logit, data.frame(gpa=x), type="response"), add=TRUE, col="blue")

-- GRE
> logit <- glm(admit ~ gre, family = binomial)
> summary(logit)

Call:
glm(formula = admit ~ gre, family = binomial)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.1623  -0.9052  -0.7547   1.3486   1.9879  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -2.901344   0.606038  -4.787 1.69e-06 ***
gre          0.003582   0.000986   3.633  0.00028 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 499.98  on 399  degrees of freedom
Residual deviance: 486.06  on 398  degrees of freedom
AIC: 490.06

Number of Fisher Scoring iterations: 4

> plot(gre, admit)
> curve(predict(logit, data.frame(gre=x), type="response"), add=TRUE, col="blue")

-- Rank
> logit <- glm(admit ~ rank, family = binomial)
> summary(logit)

Call:
glm(formula = admit ~ rank, family = binomial)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.1989  -0.9599  -0.7508   1.1561   1.9365  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)   0.6366     0.3061   2.080   0.0375 *  
rank         -0.5863     0.1240  -4.728 2.26e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 499.98  on 399  degrees of freedom
Residual deviance: 475.71  on 398  degrees of freedom
AIC: 479.71

Number of Fisher Scoring iterations: 4

> plot(rank, admit)
> curve(predict(logit, data.frame(rank=x), type="response"), add=TRUE, col="blue")



-- Rank
> nrow(myData[myData$rank == 1,])
[1] 61
> nrow(myData[myData$rank == 2,])
[1] 151
> nrow(myData[myData$rank == 3,])
[1] 121
> nrow(myData[myData$rank == 4,])
[1] 67

> nrow(accepted[accepted$rank == 1,])
[1] 33
> nrow(accepted[accepted$rank == 2,])
[1] 54
> nrow(accepted[accepted$rank == 3,])
[1] 28
> nrow(accepted[accepted$rank == 4,])
[1] 12

> attach(newData)
> logit <- glm(admit ~ gre + gpa + rank1 + rank2 + rank3 + rank4, family = binomial)
> summary(logit)

Call:
glm(formula = admit ~ gre + gpa + rank1 + rank2 + rank3 + rank4, 
    family = binomial)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.6268  -0.8662  -0.6388   1.1490   2.0790  

Coefficients: (1 not defined because of singularities)
             Estimate Std. Error z value
(Intercept) -5.541443   1.138072  -4.869
gre          0.002264   0.001094   2.070
gpa          0.804038   0.331819   2.423
rank1        1.551464   0.417832   3.713
rank2        0.876021   0.366735   2.389
rank3        0.211260   0.392857   0.538
rank4              NA         NA      NA
            Pr(>|z|)    
(Intercept) 1.12e-06 ***
gre         0.038465 *  
gpa         0.015388 *  
rank1       0.000205 ***
rank2       0.016908 *  
rank3       0.590748    
rank4             NA    
---
Signif. codes:  
0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 499.98  on 399  degrees of freedom
Residual deviance: 458.52  on 394  degrees of freedom
AIC: 470.52

Number of Fisher Scoring iterations: 4
Admit = -5.541443 + .804038GPA + .0022644GRE + 1.551464RANK1 + .876021RANK2 + .211260RANK3
newadmitvalue <- function(gpa, gre, rank){
  val = 0
  if(rank == 1){
    val = ((-5.541) + (.00226*gre) + (.804038*gpa) + (1.551*rank))
    return (val > 0)
  }
  if(rank == 2){
    val = ((-5.541) + (.00226*gre) + (.804038*gpa) + (.876*rank))
    return (val > 0)
  }
  if(rank == 3){
    val = ((-5.541) + (.00226*gre) + (.804038*gpa) + (.211*rank))
    return (val > 0)
  }
  if(rank == 4){
    val = ((-5.541) + (.00226*gre) + (.804038*gpa))
    return (val > 0)
  }
  
}

> newadmitvalue(3.21, 700, 3)
[1] FALSE
> newadmitvalue(3.38, 680, 3)
[1] FALSE
> newadmitvalue(3.89, 500, 3)
[1] FALSE
> newadmitvalue(3, 710, 3)
[1] FALSE
> newadmitvalue(4, 500, 3)
[1] FALSE
> newadmitvalue(2.89, 400, 2)
[1] FALSE